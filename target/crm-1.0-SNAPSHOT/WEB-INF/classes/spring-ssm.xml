<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.bus.mapper"/>
    <context:component-scan base-package="com.bus.entity"/>
    <context:component-scan base-package="com.bus.service"/>
    <context:property-placeholder location="classpath:db.properties,classpath:redis.properties"/>

    <!-- 1.jedis连接配置 -->
    <bean name="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
    </bean>
    <!-- 2.连接池管理工厂 -->
    <bean name="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <!-- 3.redisTemplate -->
    <bean name="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>



    <!--1.配置连接池-->
    <bean name="dateSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--2.得到工厂-->
   <!-- <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dateSource"/>
        <property name="typeAliasesPackage" value="com.bus.entity"/>
        <property name="mapperLocations" value="com/bus/mapper/*.xml"/>
    </bean>-->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dateSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>
    <!--3.动态代理,用来通用Mapper后，得用通用Mapper得扫描-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bus.mapper"/>
        <!--指定通用Mapper-->
        <property name="properties">
            <value>
                mapper=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

    <!-- 加事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dateSource"/>
    </bean>
    <!-- 打开注解驱动 -->
    <tx:annotation-driven/>
    <!-- ======整合shiro的配置====== -->
    <!-- 1. 加密匹配器 -->
    <bean name="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="3"/>
    </bean>
    <!-- 2. 注册realm加密匹配器 -->
    <bean name="realm" class="com.bus.shiro.MyRealmEncrypt">
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
    </bean>

    <!-- 3. 安全管理器 -->
    <bean name="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="realm"/>
    </bean>
    <!-- 会话管理配置 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 去掉 JSESSIONID -->
        <property name="sessionIdUrlRewritingEnabled" value="false" />
    </bean>
    <!-- shiro Filter 配置 -->
    <bean name="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/index"/>
        <!--未授权时跳转的连接  -->
        <property name="unauthorizedUrl" value="/index"/>
        <!-- 过滤器拦截规则 -->
        <property name="filterChainDefinitions">
            <value>
                /user/*=anon
                /index=anon
                /index.jsp=anon
                /index.html=anon
                /hello.jsp=anon
                /shiro/changeLanguage.action=anon
                /shiro/rolepermission/selectone=anon
                /shiro/rolepermission/**=anon
                /shiro/mytest = roleOr["admin"]
                /shiro/toAdd=anon
                /shiro/insert=anon
                /shiro/uer/**=anon
                /shiro/login=anon
                /menu/*=anon
                /css/**=anon
                /javascript/**=anon
                /**=authc
            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="roleOr" value-ref="orFilter"/>
            </map>
        </property>
    </bean>
    <bean name="orFilter" class="com.bus.Controller.RoleorFilter"/>


</beans>
